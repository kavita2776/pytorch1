# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lKLGzE0vkHWqXevMK731p870ES4D3UM
"""

import os
import re
import cv2 #opencv library
import numpy as np
from os.path import isfile, join
import matplotlib.pyplot as plt
import glob

col_frames = os.listdir('/content/sample_data/frame')
col_frames.sort(key=lambda f: int(re.sub('\D', '', f)))
col_images = []
for i in col_frames :
  #read frames
  img = cv2.imread('/content/sample_data/frame'+i)
  col_images.append(img)

i = 13
for frames in [i, i+1]:
  plt.imshow(cv2.cvtColor(col_images[frames], cv2.COLOR_BGR2RGB))
  plt.title("/content/sample_data/frames:" +str(frames))
  plt.show()



i = 13
for frames in [i, i+1]:
  plt.imshow(cv2.cvtColor(col_images[frames], cv2.COLOR_BGR2RGB))
  plt.title("/content/sample_data/frames:" +str(frame))
  plt.show()

grayA = cv2.cvtColor(col_images[i], cv2.COLOR_BGR2GRAY)
grayB = cv2.cvtColor(col_images[i+1], cv2.COLOR_BGR2GRAY)

plt.imshow(cv2.absdiff(grayB, grayA), cmap = 'gray')
plt.show()

diff_images = cv2.absdiff(grayB, grayA)

ret, thresh = cv2.threshold(diff_image, 30, 70, cv2.THRESH_BINARY)

plt.imshow(thresh, cmap = 'gray')
plt.show()

kernel = np.ones((3, 3),np.unit8)
dilated = cv2.dilate(thresh, kernel,iterations = 1)

#plot 
plt.imshow(dilated, cmap = 'gray')
plt.show()

plt.imshow(dilated)
cv2.line(dilated, (0, 30),(75,30), (40, 0,0))
plt.show()



dmy = col_images[13].copy()

cv2.drawContours(dmy, valid_cntrs, -1, (15,60,0), 2)
cv2.line(dmy, (0, 30), (75,30), (40,74, 74))
plt.imshow(dmy)
plt.show()

valid_cntrs = []

for i,cntrs in enumerate(contours):
  x,y,w,h = cv2.boundingRect(cntr)
  if (x <= 60 ) & (y >= 30) & (Cv2.contourArea(cntr) >= 25):
    valid_cntrs.append(cntr)

len(valid_cntrs)

dmy = col_images[13].copy()

cv2.drawContours(dmy, valid_cntrs, -1, (15,60,0), 2)
cv2.line(dmy, (0, 30), (75,30), (40,74, 74))
plt.imshow(dmy)
plt.show()

kernel = np.ones((4,4),np.unit8)
font = cv2.FONT_HERSHEY_SIMPLEX

pathIn = "contour_frsmes_3/"

for i in range(len(col_images)-1):

  grayA = cv2.cvtColor(col_images[i], cv2.COLOR_BGR2GRAY)
  grayB = cv2.cvtColor(col_images[i+], cv2.COLOR_BGR2GRAY)
  diff_image = cv2.absdiff(grayB, grayA)

  #image
  ret, thresh = cv2.yhreshold(Diff_image, 10, 74, cv2.THRESH_BINARY)

  dilated = cv2.dilated(thresh,kernel,iterations = 1)

  contours, hierarchy = cv2.findContours(dilated.copy(), cv.RETER_TREE, cv2.CHAIN_APPROX_NONE)

  valid_cntrs = []
  for cntr in contours:
    x,y,w,h = cv2.boundingRect(cntr)
    if (x <= 60) & (y >= 30) & (Cv2.contourArea(cntr) >= 25):
      if (y>= 30) & (cv2.countourArea(cntr) < 15)
      break
    valid_cntrs.append(cntr)

  dmy = col_images[i].copy()
  cv2.drawContours(dmy, valid_cntrs, -1, (20,60,0), 2)

  cv2.putText(dmy, "vehicle detected: " + str(len(valid_cntrs)), (55, 15), font, 0.6, (0, 180, 0), 2)
  cv2.line(dmy, (0, 80), (75, 80 ), (35, 74 , 74 ))
  cv2.imwrite(pathIn+str(i)+'.png',dmy)



frame_array = []
files = [f for f in os.listdir(pathIn) if isfile(join(pathIn, f))]

files.sort(key=lambda f: int(re.sub('\D', '', f)))

for i in range(len(files)):
  filename=pathIn + files[i]

  img = cv2.imread(filename)
  height, width, layers = img.shape
  size = (width,height)

  frmae_array.append(img)

out = cv2.VedioWriter(pathOut,cv2.VedioWriter_fourcc(*'DIVX'), fps, size)

for i in range(len(frame_array)):
  #
  out.write(frame_array[i])
  
out.release()

